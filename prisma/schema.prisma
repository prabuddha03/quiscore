// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    category      UserCategory @default(FREE)
    accounts      Account[]
    sessions      Session[]
    events        Event[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum UserCategory {
    FREE
    PREMIUM
    ADMIN
    ENTERPRISE
}

enum EventType {
    QUIZ
    GENERAL
}

model Event {
    id             String          @id @default(cuid())
    name           String
    type           EventType
    subType        String? // "judge_based_individual" or "general_scoring"
    allowedEditors String[]
    teams          Team[]
    rounds         Round[]
    judges         Judge[]
    createdBy      String
    createdAt      DateTime        @default(now())
    participations Participation[]

    createdByUser User @relation(fields: [createdBy], references: [id])
}

model Judge {
    id      String  @id @default(cuid())
    name    String
    email   String
    event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId String
    scores  Score[]

    @@unique([email, eventId])
}

model Team {
    id             String          @id @default(cuid())
    name           String
    documentLink   String?
    remarks        String?
    event          Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId        String
    scores         Score[]
    participations Participation[]
}

model Participant {
    id                      String                   @id @default(cuid())
    name                    String
    email                   String?
    phone                   String
    participations          Participation[]
    leaderboardParticipants LeaderboardParticipant[]
}

model Participation {
    id                       String                  @id @default(cuid())
    participant              Participant?            @relation(fields: [participantId], references: [id])
    participantId            String?
    externalId               String?
    team                     Team?                   @relation(fields: [teamId], references: [id])
    teamId                   String?
    event                    Event?                  @relation(fields: [eventId], references: [id])
    eventId                  String?
    score                    Int?
    teamRank                 Int? // Rank of the team in the event (1st, 2nd, 3rd, etc.)
    leaderboardParticipant   LeaderboardParticipant? @relation(fields: [leaderboardParticipantId], references: [id])
    leaderboardParticipantId String?
}

model Round {
    id        String     @id @default(cuid())
    name      String
    event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId   String
    rules     Json? // For quiz: pounce, bounce, etc. For general: other settings
    questions Question[]
    criteria  Criteria[]
}

model Question {
    id      String  @id @default(cuid())
    number  Int
    round   Round   @relation(fields: [roundId], references: [id], onDelete: Cascade)
    roundId String
    scores  Score[]
}

model Criteria {
    id        String  @id @default(cuid())
    name      String
    maxPoints Int?
    round     Round   @relation(fields: [roundId], references: [id], onDelete: Cascade)
    roundId   String
    scores    Score[]
}

model Score {
    id         String    @id @default(cuid())
    team       Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId     String
    question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String?
    criteria   Criteria? @relation(fields: [criteriaId], references: [id], onDelete: Cascade)
    criteriaId String?
    judge      Judge?    @relation(fields: [judgeId], references: [id], onDelete: Cascade)
    judgeId    String?
    method     String? // e.g., "direct", "pounce-right", "custom"
    pointers   String? // Judge's notes for the score
    points     Int

    @@unique([teamId, questionId])
    @@unique([teamId, criteriaId, judgeId])
}

model Leaderboard {
    id           String                   @id @default(cuid())
    name         String // Name of the leaderboard (e.g., "Quiz Championship 2024")
    eventIds     String[] // Array of event IDs to include in this leaderboard
    participants LeaderboardParticipant[] // All participants in this leaderboard
    createdAt    DateTime                 @default(now())
    updatedAt    DateTime                 @updatedAt
}

model LeaderboardParticipant {
    id             String          @id @default(cuid())
    leaderboardId  String
    leaderboard    Leaderboard     @relation(fields: [leaderboardId], references: [id], onDelete: Cascade)
    participantId  String
    participant    Participant     @relation(fields: [participantId], references: [id], onDelete: Cascade)
    totalScore     Int             @default(0) // Sum of all participation scores for this participant
    participations Participation[] // All participations for this participant in the leaderboard events
    rank           Int? // Rank in this leaderboard (1st, 2nd, 3rd, etc.)
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt

    @@unique([leaderboardId, participantId])
}
