// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    events        Event[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Event {
    id             String   @id @default(cuid())
    name           String
    type           String // e.g., "quiz"
    allowedEditors String[] // email addresses
    teams          Team[]
    rounds         Round[]
    createdBy      String
    createdAt      DateTime @default(now())

    createdByUser User @relation(fields: [createdBy], references: [id])
}

model Team {
    id      String  @id @default(cuid())
    name    String
    event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId String
    scores  Score[]
}

model Round {
    id        String     @id @default(cuid())
    name      String
    event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId   String
    rules     Json // pounce, bounce, direction, marking rules
    questions Question[]
}

model Question {
    id      String  @id @default(cuid())
    number  Int
    round   Round   @relation(fields: [roundId], references: [id], onDelete: Cascade)
    roundId String
    scores  Score[]
}

model Score {
    id         String   @id @default(cuid())
    team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId     String
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String
    method     String // e.g., "direct", "pounce-right", "custom"
    points     Int
}
